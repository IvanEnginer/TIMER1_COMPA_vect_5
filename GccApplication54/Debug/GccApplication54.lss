
GccApplication54.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001b8  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006a  0080006a  00000256  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000009bb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000030  00000000  00000000  000009ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000115  00000000  00000000  00000a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000095  00000000  00000000  00000b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000085  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000007c  00000000  00000000  00000c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000c2  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000b9  00000000  00000000  00000d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  00000e43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  8a:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_7>:
volatile int sec = 0;
volatile unsigned char segcounter = 0;
char SEGMENTE[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};

ISR(TIMER1_COMPA_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	vol++;
  a0:	80 91 6d 00 	lds	r24, 0x006D
  a4:	90 91 6e 00 	lds	r25, 0x006E
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	90 93 6e 00 	sts	0x006E, r25
  ae:	80 93 6d 00 	sts	0x006D, r24
	TCNT1H=0x00;
  b2:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
  b4:	1c bc       	out	0x2c, r1	; 44
}
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	ef 93       	push	r30
  d6:	ff 93       	push	r31
	
		PORTB = 0x00;
  d8:	18 ba       	out	0x18, r1	; 24
		PORTA = ~(1 << segcounter);
  da:	20 91 6a 00 	lds	r18, 0x006A
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__vector_5+0x24>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	2a 95       	dec	r18
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <__vector_5+0x20>
  ec:	80 95       	com	r24
  ee:	8b bb       	out	0x1b, r24	; 27
		switch (segcounter)
  f0:	80 91 6a 00 	lds	r24, 0x006A
  f4:	88 23       	and	r24, r24
  f6:	19 f0       	breq	.+6      	; 0xfe <__vector_5+0x3a>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	91 f4       	brne	.+36     	; 0x120 <__vector_5+0x5c>
  fc:	09 c0       	rjmp	.+18     	; 0x110 <__vector_5+0x4c>
		{
			case 0:
			PORTB = SEGMENTE[vol];
  fe:	e0 91 6d 00 	lds	r30, 0x006D
 102:	f0 91 6e 00 	lds	r31, 0x006E
 106:	e0 5a       	subi	r30, 0xA0	; 160
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	80 81       	ld	r24, Z
 10c:	88 bb       	out	0x18, r24	; 24
			break;
 10e:	08 c0       	rjmp	.+16     	; 0x120 <__vector_5+0x5c>
			case 1:
			PORTB = SEGMENTE[sec];
 110:	e0 91 6b 00 	lds	r30, 0x006B
 114:	f0 91 6c 00 	lds	r31, 0x006C
 118:	e0 5a       	subi	r30, 0xA0	; 160
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	80 81       	ld	r24, Z
 11e:	88 bb       	out	0x18, r24	; 24
			break;
		}
		
			if ((segcounter++) == 1)
 120:	80 91 6a 00 	lds	r24, 0x006A
 124:	98 2f       	mov	r25, r24
 126:	9f 5f       	subi	r25, 0xFF	; 255
 128:	90 93 6a 00 	sts	0x006A, r25
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	11 f4       	brne	.+4      	; 0x134 <__vector_5+0x70>
			{
				segcounter = 0;
 130:	10 92 6a 00 	sts	0x006A, r1
			}
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	2f 91       	pop	r18
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <main>:

int main(void)
{
	DDRA=0xFF;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
 14c:	1b ba       	out	0x1b, r1	; 27
	PORTB=0x00;
 14e:	18 ba       	out	0x18, r1	; 24
	DDRB=0xFF;
 150:	87 bb       	out	0x17, r24	; 23
	TCCR1A=0x00;
 152:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x05;
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
 158:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
 15a:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
 15c:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
 15e:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x1E;
 160:	8e e1       	ldi	r24, 0x1E	; 30
 162:	8b bd       	out	0x2b, r24	; 43
	OCR1AL=0x85;
 164:	85 e8       	ldi	r24, 0x85	; 133
 166:	8a bd       	out	0x2a, r24	; 42
	OCR1BH=0x00;
 168:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
 16a:	18 bc       	out	0x28, r1	; 40
	TIMSK=0x50;
 16c:	80 e5       	ldi	r24, 0x50	; 80
 16e:	89 bf       	out	0x39, r24	; 57
	TCCR2 |= (1 << CS21);
 170:	85 b5       	in	r24, 0x25	; 37
 172:	82 60       	ori	r24, 0x02	; 2
 174:	85 bd       	out	0x25, r24	; 37
	sei();
 176:	78 94       	sei
	
	while(1)
	{
			if (vol == 10)
 178:	80 91 6d 00 	lds	r24, 0x006D
 17c:	90 91 6e 00 	lds	r25, 0x006E
 180:	0a 97       	sbiw	r24, 0x0a	; 10
 182:	69 f4       	brne	.+26     	; 0x19e <main+0x56>
			{
				sec++;
 184:	80 91 6b 00 	lds	r24, 0x006B
 188:	90 91 6c 00 	lds	r25, 0x006C
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	90 93 6c 00 	sts	0x006C, r25
 192:	80 93 6b 00 	sts	0x006B, r24
				vol = 0;
 196:	10 92 6e 00 	sts	0x006E, r1
 19a:	10 92 6d 00 	sts	0x006D, r1
			}
			if (sec == 10)
 19e:	80 91 6b 00 	lds	r24, 0x006B
 1a2:	90 91 6c 00 	lds	r25, 0x006C
 1a6:	0a 97       	sbiw	r24, 0x0a	; 10
 1a8:	39 f7       	brne	.-50     	; 0x178 <main+0x30>
			{
				sec = 0;
 1aa:	10 92 6c 00 	sts	0x006C, r1
 1ae:	10 92 6b 00 	sts	0x006B, r1
 1b2:	e2 cf       	rjmp	.-60     	; 0x178 <main+0x30>

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
